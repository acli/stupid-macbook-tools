#!/usr/bin/perl
#  vi: set sw=2 ai sm:
# vim: set sw=2 ai sm:
#
# NOTE:
#
# According to http://www.brighthub.com/computing/hardware/articles/83301.aspx (looks a little fishy)
# a temperature higher than 70 is "worrisome" and when it hits 80 we need to hibernate immediately.
#
# According to http://superuser.com/questions/94166/maximum-temperature-laptop-internals-can-handle-cooling-options
# 70-85 deg C is just normal heavy use but need cooling. >85 deg C is time to "take a break".

use strict;
use integer;
use utf8;

use POSIX;
use Data::Dumper;

use Getopt::Long;
use vars qw( $debug );
use vars qw( $target_time_step );
use vars qw( $ssid_scan_frequency $ssid_rescan_frequency $ssid_scan_frequency_in_moving_train );

$target_time_step = 5;
$ssid_rescan_frequency = 30;	# while wlan0 is up
$ssid_scan_frequency = 10;	# while wlan0 is down
$ssid_scan_frequency_in_moving_train = 5;

use vars qw( $ambient_light_input $brightness_input $max_brightness_input );
use vars qw( $lid_state_input );
use vars qw( $wifi_state_input_template );

$ambient_light_input  = '/sys/class/hwmon/hwmon2/device/light'; # or /sys/devices/platform/applesmc.768/light
$brightness_input     = '/sys/class/backlight/intel_backlight/brightness';
$max_brightness_input = '/sys/class/backlight/intel_backlight/max_brightness';
$lid_state_input      = '/proc/acpi/button/lid/LID0/state';
$wifi_state_input_template     = '/sys/class/net/wlan%d/operstate';

use vars qw( $battery_present_input $battery_status_input $battery_capacity_input $battery_design_capacity_input
    $battery_charge_input $battery_reserve_charge_input $battery_temperature_input $battery_voltage_input
    $ac_online_input );

$battery_present_input         = '/sys/class/power_supply/BAT0/present';
$battery_status_input          = '/sys/class/power_supply/BAT0/status';
$battery_capacity_input        = '/sys/class/power_supply/BAT0/charge_full';
$battery_design_capacity_input = '/sys/class/power_supply/BAT0/charge_full_design';
$battery_charge_input          = '/sys/class/power_supply/BAT0/charge_now';
$battery_reserve_charge_input  = '/sys/class/power_supply/BAT0/alarm';
$battery_temperature_input     = '/sys/class/power_supply/BAT0/temp';
$battery_voltage_input         = '/sys/class/power_supply/BAT0/voltage_now';
$ac_online_input               = '/sys/class/power_supply/ADP1/online';

use vars qw( $fanspeed_min_input $fanspeed_max_input $fanspeed_lock_input $fanspeed_setpoint_input );
use vars qw( $fanspeed_normal $fanspeed_high $fanspeed_max );

$fanspeed_min_input = '/sys/class/hwmon/hwmon2/device/fan1_min';
$fanspeed_max_input = '/sys/class/hwmon/hwmon2/device/fan1_max';
$fanspeed_lock_input = '/sys/class/hwmon/hwmon2/device/fan1_manual';
$fanspeed_setpoint_input = '/sys/class/hwmon/hwmon2/device/fan1_output';
$fanspeed_normal = 3200;

use vars qw( $cpu_temp_input_template $cpu_high_temp_input_template $cpu_unsafe_temp_input_template  );
use vars qw( $temp_input_template $temp_id_input_template );

$cpu_temp_input_template = '/sys/class/hwmon/hwmon0/temp%d_input';
$cpu_high_temp_input_template = '/sys/class/hwmon/hwmon0/temp%d_max';
$cpu_unsafe_temp_input_template = '/sys/class/hwmon/hwmon0/temp%d_crit';
$temp_input_template = '/sys/class/hwmon/hwmon2/device/temp%d_input';
$temp_id_input_template = '/sys/class/hwmon/hwmon2/device/temp%d_label';

use vars qw( %possibly_a_moving_train_ssids %not_a_moving_train_ssids );
%possibly_a_moving_train_ssids = (
  'GO WIFI by Cruze'	=> 'GO - Yorkdale',
  'Free WiFi at GO'	=> 'GO',
  'LSC_Test'		=> 'TTC - non-functional test network',
  'TCONNECT'		=> 'TTC (may or may not be functional)',
);
%not_a_moving_train_ssids = (
  'eduroam'		=> 'universities',
);

use vars qw( %autoconnect_ssids );
%autoconnect_ssids = (
  'ocadu'		=> 2,
  'TCONNECT'		=> 1,
);


use vars qw( $min_acceptable_backlight_brightness $battery_capacity $battery_design_capacity $min_acceptable_battery_charge );

use vars qw( $last_guess_of_a_moving_train );
use vars qw( $low_power_mode_wanted );


sub log_generic ($$;$) {
  my($flag, $msg, $debug_level) = @_;
  $msg =~ s/(\\)/\\\1/sg;
  $msg =~ s/\r/\\r/sg;
  $msg =~ s/\n/\\n/sg;
  printf STDERR "%d%s\t%s\n", time, $flag, $msg if $debug >= $debug_level;
}

sub log_comment ($;$) {
  my($s, $debug_level) = @_;
  return log_generic '#', $s, $debug_level;
}

sub log_input ($;$) {
  my($s, $debug_level) = @_;
  return log_generic '<', $s, $debug_level;
}

sub log_output ($;$) {
  my($s, $debug_level) = @_;
  return log_generic '>', $s, $debug_level;
}

sub read_string_from_file ($) {
  my($filename) = @_;
  my $it;
  local(*INPUT, $_, $.);
  if (open INPUT, '<', $filename) {
    log_comment "reading $filename", 5;
    $it = scalar <INPUT>;
    chomp $it;
    log_input $it, 5;
    close INPUT;
  }
  return $it;
}

sub read_number_from_file ($) {
    my($filename) = @_;
    my $it = read_string_from_file $filename;
    $it += 0 if defined $it;
    return $it;
}

sub read_number_array_from_files ($) {
  my($filename_template) = @_;
  my $it = [];
  for (my $i = 1;; $i += 1) {
    my $det = read_number_from_file sprintf($filename_template, $i);
  last unless defined $det;
    push @$it, $det;
  }
  return $it;
}

sub write_string_to_file ($$;$$) {
  my($filename, $value, $log_message, $log_level) = @_;
  local(*OUTPUT, $_);
  if (open(OUTPUT, '>', $filename)) {
    log_comment $log_message, $log_level if defined $log_message;
    log_output $value, 5;
    print OUTPUT "$value\n";
    close OUTPUT;
  } else {
    log_comment "$brightness_input: creat: $!";
  }
}

sub get_ambient_light () {
  my $it;
  local(*INPUT, $_);
  my $s = read_string_from_file $ambient_light_input;
  $it = [$1, $2] if defined $s && $s =~ /^\((\d+),(\d+)\)/;
  return $it;
}

sub get_max_backlight_brightness () {
  return read_number_from_file $max_brightness_input;
}

sub get_backlight_brightness () {
  return read_number_from_file $brightness_input;
}

sub set_backlight_brightness ($) {
  my($brightness) = @_;
  write_string_to_file $brightness_input, $brightness, "setting brightness to $brightness", 1;
  return get_backlight_brightness;
}

sub get_lid_state () {
  my $state;
  local($`, $&, $', $1);
  my $s = read_string_from_file $lid_state_input;
  $state = $1 if $s =~ /^state:\s+(\S+)/;
  return $state;
}

sub get_ac_detected () {
  return read_number_from_file $ac_online_input;
}

sub get_battery_detected () {
  return read_number_from_file $battery_present_input;
}

sub get_battery_status () {
  return read_string_from_file $battery_status_input;
}

sub get_battery_design_capacity () {
  return read_number_from_file $battery_design_capacity_input;
}

sub get_battery_capacity () {
  return read_number_from_file $battery_capacity_input;
}

sub get_battery_charge () {
  return read_number_from_file $battery_charge_input;
}

sub get_battery_reserve_charge () {
  return read_number_from_file $battery_reserve_charge_input;
}

sub get_battery_temperature () {
  my $data = read_number_from_file $battery_temperature_input;
  no integer;
  return $data/10;
}

sub get_battery_input_voltage () {
  return read_number_from_file $battery_voltage_input;
}

sub get_cpu_temperature () {
  my $data = read_number_array_from_files $cpu_temp_input_template;
  no integer;
  return [map {$_/1000} @$data];
}

sub get_cpu_high_temperature_threshold () {
  my $data = read_number_array_from_files $cpu_high_temp_input_template;
  no integer;
  return [map {$_/1000} @$data];
}

sub get_cpu_unsafe_temperature_threshold () {
  my $data = read_number_array_from_files $cpu_unsafe_temp_input_template;
  no integer;
  return [map {$_/1000} @$data];
}

sub might_be_on_a_moving_train ($) {
  my($ssids) = @_;
  my $it;

use vars qw(  %not_a_moving_train_ssids );
  my $possibly_is = join(' ', map { defined $ssids->{$_}? $_: ()} sort keys %possibly_a_moving_train_ssids);
  my $possibly_not = join(' ', map { defined $ssids->{$_}? $_: ()} sort keys %not_a_moving_train_ssids);
  if ($possibly_is) {
    log_comment "moving-train ssid detected: $possibly_is", 3;
    $last_guess_of_a_moving_train = time;
    $it = 1;
  } elsif ($possibly_not) {
    log_comment "not-moving-train ssid detected: $possibly_not", 3;
    $it = 0;
    undef $last_guess_of_a_moving_train;
  } elsif (defined $last_guess_of_a_moving_train && time - $last_guess_of_a_moving_train < 600) {
    log_comment "moving-train ssid was recently detected, assuming we're still on the train", 3;
    $it = 1;
  } else {
    log_comment 'no moving-train network detected', 4;
    undef $last_guess_of_a_moving_train;
  }
  return $it;
}

sub wifi_is_up () {
  my $it;
  for (my $i = 0; $i < 10; $i += 1) {
    my $input = sprintf $wifi_state_input_template, $i;
    my $s = read_string_from_file $input if -f $input;
    $it = 1 if $s eq 'up'; # or down, or dormant
  last if defined $it;
  }
  return $it;
}

sub wifi_is_down () {
  my $it;
  if (!wifi_is_up) {
    for (my $i = 0; $i < 10; $i += 1) {
      my $input = sprintf $wifi_state_input_template, $i;
      my $s = read_string_from_file $input if -f $input;
      $it = 1 if $s eq 'down'; # or up, or dormant
    last if defined $it;
    }
  }
  return $it;
}

sub get_ssid () {
  my $ssid;
  my $cmd_name = 'iwgetid';
  my $cmd_path = (map { my $det = "$_/$cmd_name"; -f $det? $det: (); } qw( /sbin /usr/sbin /bin /usr/bin ))[0];
  my @cmd = ($cmd_path, '-r');
  local(*INPUT, $_, $1);
  my $h = open(INPUT, '-|');
  die "scan_ssid: Can't find $cmd_name\n" unless $cmd_name;
  die "scan_ssid: $cmd_name: fork: $!\n" unless defined $h;
  if ($h) {
    log_comment "reading from @cmd", 5;
    $ssid = scalar <INPUT>;
    chomp $ssid if defined $ssid;
    log_input $ssid, 5;
    close INPUT;
  } else {
    POSIX::close(2); # close STDERR
    exec { $cmd_name } @cmd;
    die "scan_ssid: $cmd_name: exec: $!\n";
  }
  return $ssid;
}

sub scan_ssid () {
  my %ssid;
  my $cmd_name = 'iwlist';
  my $cmd_path = (map { my $det = "$_/$cmd_name"; -f $det? $det: (); } qw( /sbin /usr/sbin /bin /usr/bin ))[0];
  my @cmd = ($cmd_path, 'scan');
  local(*INPUT, $_, $1);
  my $h = open(INPUT, '-|');
  die "scan_ssid: Can't find $cmd_name\n" unless $cmd_name;
  die "scan_ssid: $cmd_name: fork: $!\n" unless defined $h;
  if ($h) {
    my $bssid;
    while (<INPUT>) {
      chomp;
      if (/^\s*Cell \S+ - Address: (\S+)/) {
	$bssid = $1;
      } elsif (/ESSID:"(.*)"\s*/) {
	$ssid{$1}->{$bssid} = 1;
      }
    }
    close INPUT;
  } else {
    POSIX::close(2); # close STDERR
    POSIX::dup(1); # dup STDOUT into STDERR
    exec { $cmd_name } @cmd;
    die "scan_ssid: $cmd_name: exec: $!\n";
  }
  return \%ssid;
}

sub get_fan_speed () {
  return read_number_from_file $fanspeed_setpoint_input;
}

sub set_fan_speed ($) {
  my($setpoint) = @_;
  if (get_fan_speed != $setpoint) {
    write_string_to_file $fanspeed_lock_input, 1;
    write_string_to_file $fanspeed_setpoint_input, $setpoint, "setting fan speed to $setpoint", 1;
  }
  return get_fan_speed;
}

sub notify_send ($) {
  my($msg) = @_;
  $ENV{'DISPLAY'} = ':0';
  system 'notify-send', '-t', '3000', $msg;
}

sub wall ($) {
  my($msg) = @_;
  system 'wall', $msg;
}

sub notify ($;$) {
  my($msg, $delay) = @_;
  wall($msg);
  notify_send($msg);
  log_comment $msg;
  sleep $delay if defined $delay;
}

sub get_max_fan_speed () {
  return read_number_from_file $fanspeed_max_input;
}

sub enter_low_power_mode () {
  log_comment "attempting to enter low power mode";
  system 'pm-powersave', 'true';
}

sub exit_low_power_mode () {
  log_comment "exiting low power mode";
  system 'pm-powersave', 'false';
}

sub attempt_suspend (;$reason) {
  my($reason) = @_;
  my $justification = $reason == 1? " - $reason": '';
  notify "attempting suspend$reason", 5;
  system { 'pm-suspend' } 'pm-suspend';
}

sub attempt_hibernation () {
  notify "attempting hibernation";
  notify "enabling swap";
  system { 'swapon' } 'swapon', '-a';
  notify "attempting to enter hibernation", 10;
  system { 'pm-hibernate' } 'pm-hibernate';
}

sub probe_environment () {
  # Always output something at startup, so that when the sysadmin looks at readproctitle output
  # they wouldn't be scratching their head wondering why there's no new data coming in
  $debug += 0;
  log_comment "sysmond started at debug level $debug - kill -USR1 $$ to increase verbosity, -USR2 to decrease verbosity";

  my $max_backlight_brightness = get_max_backlight_brightness;
  $min_acceptable_backlight_brightness = $max_backlight_brightness/100;
  $min_acceptable_backlight_brightness = 1 if !$min_acceptable_backlight_brightness;
  log_comment "brightness: max=$max_backlight_brightness -> min acceptable=$min_acceptable_backlight_brightness", 2;

  $fanspeed_max = get_max_fan_speed;
  $fanspeed_high = ($fanspeed_max + $fanspeed_normal)/2;

  if (get_battery_detected) {
    $battery_capacity = get_battery_capacity;
    $battery_design_capacity = get_battery_design_capacity;
    $min_acceptable_battery_charge = 2*get_battery_reserve_charge;
    log_comment sprintf("battery detected, operating at %d%% design capacity", (100*$battery_capacity)/$battery_design_capacity), 1;
  } else {
    log_comment "WARNING: no battery detected!";
  }
}

sub main_loop () {
  my $t0 = time;
  my $last_acceptable_brightness;
  my($flickering, $flicker_counter);
  my($ssids, $next_ssid_scan, $no_scan_results_counter);
  my $next_allowed_network_restart;
  my $next_allowed_reassociate;
  for (;;) {
    my $t = time;
    my $deadline = $t + $target_time_step;
    log_comment "time=$t -> deadline=$deadline, next ssid scan=$next_ssid_scan", 3;

    my $light = get_ambient_light;
    my $lid_state = get_lid_state;
    my $backlight_brightness = get_backlight_brightness;
    log_comment sprintf("ambient light L=%d, R=%d; lid %s; backlight brightness %d",
	$light->[0], $light->[1], $lid_state, $backlight_brightness), 1;

    if ($light->[0] || $light->[1] || $lid_state eq 'open') {
      if (!$flickering && $backlight_brightness >= $min_acceptable_backlight_brightness) {
	$last_acceptable_brightness = $backlight_brightness;
      } elsif (defined $last_acceptable_brightness) {
	log_comment "backlight $backlight_brightness too dim, restoring to last good $last_acceptable_brightness", 1;
	set_backlight_brightness $last_acceptable_brightness;
      } else {
	log_comment "backlight $backlight_brightness too dim, resetting to minimum $min_acceptable_backlight_brightness", 1;
	set_backlight_brightness $min_acceptable_backlight_brightness;
      }
      $flickering = 0;
    } elsif ($lid_state eq 'closed') {
      set_backlight_brightness $flicker_counter*(get_max_backlight_brightness/1);
      $flicker_counter = !$flicker_counter;
      $flickering = 1;
    }

    my $low_power_mode_wanted_currently = $low_power_mode_wanted;
    my($suspend_needed, $hibernation_needed);

    my $battery_temperature = get_battery_temperature;
    my $cpu_temperatures = get_cpu_temperature;
    my $cpu_high_temperature_thresholds = get_cpu_high_temperature_threshold;
    my $cpu_unsafe_temperature_thresholds = get_cpu_unsafe_temperature_threshold;
    my($temperature_is_high, $temperature_is_unsafe);
    my $comment = sprintf('temperatures: battery %g, cpu: %s', $battery_temperature, join(', ', @$cpu_temperatures));
    $temperature_is_high = 1 if $battery_temperature >= 35; # FIXME
    for (my $i = 0; $i < @$cpu_temperatures; $i += 1) {
      $temperature_is_high = 1 if $cpu_temperatures->[$i] >= $cpu_high_temperature_thresholds->[$i];
      $temperature_is_unsafe = 1 if $cpu_temperatures->[$i] >= $cpu_unsafe_temperature_thresholds->[$i];
    }
    if ($temperature_is_unsafe) {
      $low_power_mode_wanted = "$comment - unsafe";
      log_comment $low_power_mode_wanted;
      set_fan_speed $fanspeed_max;
    } elsif ($temperature_is_high) {
      log_comment "$comment - high", 1;
      set_fan_speed $fanspeed_high;
    } else {
      log_comment $comment, 1;
      set_fan_speed $fanspeed_normal;
      $low_power_mode_wanted = 0;
    }

    my $ac_online = get_ac_detected;
    $low_power_mode_wanted = 1 if !$ac_online;

    if (defined $min_acceptable_battery_charge) {
      my $battery_charge = get_battery_charge;
      log_comment sprintf("battery %d%% (%d%% design capacity), AC %s",
	  (100*$battery_charge)/$battery_capacity,
	  (100*$battery_charge)/$battery_design_capacity,
	  ($ac_online? 'online': 'offline')), 1;
      if ($battery_charge < $min_acceptable_battery_charge && !$ac_online) {
	log_comment "battery charge $battery_charge is too low (< $min_acceptable_battery_charge)";
	$hibernation_needed = 1;
      }
    }

    if ($low_power_mode_wanted) {
#     enter_low_power_mode unless $low_power_mode_wanted_currently;
    } else {
#     exit_low_power_mode if $low_power_mode_wanted_currently;
    }

    if ($hibernation_needed) {
      attempt_hibernation;
    } elsif ($suspend_needed) {
      attempt_suspend $suspend_needed;
    }

    if (time >= $next_ssid_scan) {
      if (!wifi_is_down) {
	$ssids = scan_ssid;
	if ($ssids && %$ssids) {
	  log_comment('detected wifi networks: ' . join(' ', sort keys %$ssids), 2);
	  $no_scan_results_counter = 0;
	  $next_ssid_scan = $t + (might_be_on_a_moving_train($ssids)? $ssid_scan_frequency_in_moving_train:
	      $ssid_rescan_frequency);
	  if (wifi_is_up) {
	    if (get_ssid eq 'eduroam' && defined $ssids->{'ocadu'}) { # FIXME
	      log_comment 'eduroam detected at ocad, trying to reassociate with ocad', 2;
	      system qw( iw dev wlan0 connect -w ocadu );
	    }
	  } else {
	    for my $candidate (keys %possibly_a_moving_train_ssids) {
	      if (defined $ssids->{$candidate}) {
		system 'iw', 'dev', 'wlan0', 'connect', '-w', $candidate;
	      }
	    last if wifi_is_up;
	    }
	    if (!wifi_is_up) {
	      for my $candidate (keys %autoconnect_ssids) {
		if (defined $ssids->{$candidate}) {
		  system 'iw', 'dev', 'wlan0', 'connect', '-w', $candidate;
		}
	      last if wifi_is_up;
	      }
	    }
	  }
	} else {
	  log_comment('no results from wifi', 2);
	  $no_scan_results_counter += 1;
	  if ($no_scan_results_counter > 1 && time >= $next_allowed_network_restart) {
	    $next_allowed_network_restart = time + 30;
	    log_comment 'trying to restart network-manager';
	    system qw( systemctl restart network-manager );
	  }
	  $next_ssid_scan = $t + $ssid_scan_frequency;
	}
      } elsif (wifi_is_down) {
	$next_ssid_scan = $t + $ssid_scan_frequency;
      }
    }
    if (time < $deadline) {
      my $dt = $deadline - time;
      log_comment "sleeping for $dt s", 2;
      sleep $dt;
    }
  }
}

Getopt::Long::config('bundling');
GetOptions(
  'd|debug' => sub { $debug += 1; },
) || exit(1);

$SIG{'USR1'} = sub { $debug += 1;           log_comment "SIGUSR1 received, debug level is now $debug"; };
$SIG{'USR2'} = sub { $debug -= 1 if $debug; log_comment "SIGUSR2 received, debug level is now $debug"; };

probe_environment;
main_loop;


