#!/bin/sh
# A small script to run pidgin more safely when we're trying out
# potentially unsafe prpl's
#
# What it does:
# - Backs up *all* xml config files
# - Runs pidgin in debug mode and saves the debug log
#
# If multilog is available it will be used for logging.

# Compressor option: gzip
#compress="gzip -9"
#suffix=.gz

# Compressor option: xz (NOTE: DO NOT use -7 or higher! default is already the highest safe compression ratio)
compress=xz
suffix=.xz

# Turn off core dumps
ulimit -c 0

# Make sure pidgin is there
pidgin="`which pidgin`"
if [ -z "$pidgin" ]; then
	echo "pidgin not found" >&2
	exit 1
fi

# Figure out where we should back things up to
tag="`date +'%Y%m%d%H%M%S'`"
purple="$HOME/.purple"
dir="$purple/debug/$tag"
mkdir -p "$dir"
cd "$dir" || exit $?

# Feedback
echo -n "Found pidgin at $pidgin, date tag $tag..." >&2

# Find out if tai64n is available
add_timestamp=`which tai64n`
test -z "$add_timestamp" && add_timestamp=cat

# Back up XML files (esp. accounts.xml)
(cd "$purple" && ls -1 *.xml) | while read xml; do
	$compress < "$purple/$xml" > "$dir/$tag.$xml$suffix"
done

# Force debug mode and save the debug output, and make sure core is dumped if it crashes
if [ -z "`which multilog`" ]; then

	echo " starting in non-multilog mode." >&2
	(
	# Do not compress the stderr log with xz because we need to be able to monitor it
	( ulimit -c unlimited; $pidgin -d "$@"; echo $? > st ) \
		|$add_timestamp \
		|$compress \
		> debug.log$suffix
	) 2>&1  |$add_timestamp \
		> stderr.log$suffix

	st="`cat st`"
	test -f core && mv core "$core"

else

	echo " starting in multilog mode." >&2
	(
	# Do not compress the stderr log with xz because we need to be able to monitor it
	( ulimit -c unlimited; $pidgin -d "$@"; echo $? > st ) \
		|multilog t s16777215 .
	) 2>&1  |$add_timestamp \
		> stderr.log

	st="`cat st`"
	if [ cat != "$compress" ]; then
		echo -n "Compressing logs.." >&2
		for i in current *.s *.u; do
			if [ -f "$i" ]; then
				echo -n .
				$compress "$i"
			fi
		done
		echo " done."
	fi
fi
echo "Exit status was $st" >&2
exit $st
