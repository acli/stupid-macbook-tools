#!/bin/sh
export PULSE_SINK='alsa_output.pci-0000_00_14.2.analog-stereo'
EXPECTED_PORT='analog-output-headphones'

t_i="`date +%s`"
mode=0
n_keyboards="`lsusb -v 2>/dev/null|grep Keyboard|wc -l`"
#while [ "`tty`" != '?' ]; do
while :; do
	timestamp="`date +'%Y-%m-%d %H:%M:%S'`"
	WARNING="$timestamp WARNING:"
	mpv="`/bin/showpath u=u ff=mpv standard`"
	msg=/usr/share/sounds/freedesktop/stereo/dialog-warning.oga
	msg_complete=/usr/share/sounds/freedesktop/stereo/complete.oga
	lost_device=/usr/share/sounds/freedesktop/stereo/device-removed.oga
	out_of_memory=/usr/share/sounds/ubuntu/notifications/Xylo.ogg
	lssinks="`/bin/showpath u=u ff=lssinks standard`"
	speaker="`"$lssinks"|head -1|awk '{print $1}'`"
	espeak="`/bin/showpath u=u ff=espeak standard` --stdout | $mpv --volume 40 --audio-device=pulse/$PULSE_SINK  /dev/stdin"

	case "`date +%d`" in
	28)
		case "`date +%m`" in
		02)
			divisor=5
			;;
		*)
			divisor=4
		esac
		;;
	29)
		divisor=5
		;;
	*)
		divisor=4
	esac

	# Brave eating up all memory is a very real problem. Try to detect it
	total="`free -m|head -2|tail -1|awk '{print $2}'`"
	#free="`free -m|head -2|tail -1|awk '{print $2}'`"
	free="`free -m|head -3|tail -1|awk '{print $NF}'`"
	free_percentage="`expr $free \* 100 / $total`"
	if [ "$free_percentage" -lt 25 ]; then
		echo "$WARNING $free / $total = $free_percentage\%" >&2
		[ -n "$mpv" -a -f "$lost_device" ] && "$mpv" --volume 100 "$out_of_memory" >/dev/null 2>&1
	fi

	# set correct port - FIXME: this should only be done if Linux
	if is-at-home && pulseaudio --check; then
		pa-set-sink-port $PULSE_SINK $EXPECTED_PORT
		nmcli d|grep wlan0|grep -w connected >/dev/null && nmcli device disconnect wlan0
	fi

	# set correct monitor orientation - FIXME: this should only be done if Linux
	if is-at-home; then
# unrotated: HDMI-0 connected 1920x1080+1366+0 (normal left inverted right x axis y axis) 527mm x 296mM
# rotated: HDMI-0 connected 1080x1920+1366+0 left (normal left inverted right x axis y axis) 527mm x 296mM
		if xrandr|grep 'HDMI-0 connected' >/dev/null; then
			monitor=HDMI-0
		elif xrandr|grep 'VGA-0 connected' >/dev/null; then
			monitor=VGA-0
		else
			monitor=
		fi
		# External monitor connected
		if [ -n "$monitor" ]; then
			orientation=none
			something_done=no
			wacom_reconfigured=no
			native_res="`xrandr|sed -e "1,/^$monitor/d"|head -1|awk '{print $1}'`"
			# native_res cannot be known if VGA - take a guess =P
			case "$monitor" in
			VGA-*)
				native_res=1920x1080
				;;
			esac

			# External monitor connected, rotated on X side
			if xrandr|grep "$monitor"|grep 'left .normal' >/dev/null; then
				:
			# External monitor connected, unrotated on X side
			else
				xrandr --output "$monitor" --rotate left
				something_done=yes
			fi

			# External monitor connected, resolution ok on X side
			if xrandr|grep "$monitor"|grep -w "$native_res" >/dev/null; then
				:
			# External monitor connected, resolution wrong on X side
			else
				xrandr --output "$monitor" --mode $native_res
			fi

			if grep closed /proc/acpi/button/lid/LID/state >/dev/null; then
				# NOTE: ccw makes more sense from a wiring POV, but causes problems
				# NOTE: to prevent buttons from too easily pressed by mistake, cw is better
				orientation=ccw
				if xrandr|grep eDP|grep 'left .normal' >/dev/null; then
					# for some reason turning this off makes the system super slow
					# so don't do it
					#xrandr --output eDP --off
					:
				fi
				if xrandr|grep eDP|grep primary >/dev/null; then
					xrandr --output "$monitor" --primary
					# it's very strange. if we just define HDMI as primary
					# nothing happens. we actually have to turn it off first,
					# then turn it back on (see above), then define it as primary
					xrandr --output eDP --off
					sleep 10
					xrandr --output "$monitor" --primary
					# force it to be narrower than the real monitor
					xrandr --output eDP --mode 1024x768
					something_done=yes
				fi
			else
				if xrandr|grep eDP|grep 'left .normal' >/dev/null; then
					:
				else
					xrandr --output eDP --auto
					xrandr --output eDP --primary
					something_done=yes
				fi
			fi
			# The manpage claims rotation is shared, this is false
			# (cf. https://sourceforge.net/p/linuxwacom/discussion/236871/thread/fde403a6/ )
			# Setting rotation for pad will fail; setting stylus only will cause weirdness
			for thing in 'Pen stylus' 'Pen eraser' 'Finger touch'; do
				if [ "`xsetwacom get "Wacom Intuos PT S $thing" Rotate`" != "$orientation" ]; then
					echo INFO: setting Wacom orientation $orientation >&2
					xsetwacom set "Wacom Intuos PT S $thing" Rotate "$orientation"
				fi
			done
			# 9 = top right button (unrotated)	top left rotated (cable at bottom left)
			# 8 = bottom right button (unrotated)	top right
			# 3 = top left button (unrotated)	bottom left
			# 1 = bottom left button (unrotated)	bottom right
			# right-handed config
			#left=1
			#right=3
			# left-handed config
			left=3
			right=1
			for button in 9 8 3 1; do
				if [ "$orientation" = cw ]; then
					case "$button" in
					9)	mapping="button +$left"		;;
					8)	mapping="button +$right"	;;
					3)	mapping=0			;;
					1)	mapping=0			;;
					esac
				else
					case "$button" in
					9)	mapping=0			;;
					8)	mapping=0			;;
					3)	mapping="button +$right"	;;
					1)	mapping="button +$left"		;;
					esac
				fi
				if [ "`xsetwacom get 'Wacom Intuos PT S Pad pad' Button $button|tr -d '\n'|sed -e 's/ *$//' -e 's/^button +0$/0/'`" != "$mapping" ]; then
					echo INFO: setting Wacom button $button to $mapping >&2
					xsetwacom set 'Wacom Intuos PT S Pad pad' Button $button $mapping
					wacom_reconfigured=yes
				fi
			done
			if [ $wacom_reconfigured = yes ]; then
				echo wacom set up |sh -c "$espeak"
			fi
			if [ $something_done = yes ]; then
				xscreensaver-command -restart
			fi
		fi
	fi

	# load esound as a system daemon, but only when at home
	if pulseaudio --check; then
	modules='module-esound-protocol-tcp module-native-protocol-tcp module-rtp-recv'
	if is-at-home; then
		for module in $modules; do
		case "$module" in
		*-protocol-tcp)
			opts='auth-ip-acl=127.0.0.1;192.168.0.0/24 auth-anonymous=1'
			;;
		module-rtp-recv)
			opts='sink=alsa_output.pci-0000_00_14.2.analog-stereo'
			;;
		esac
		(pacmd list-modules|grep -q "$module") || (set -x; pacmd load-module "$module" "$opts" &)
		done
	else
		for module in $modules; do
		(pacmd list-modules|grep -q "$module") && (set -x; pacmd unload-module "$module")
		done
	fi
	fi

	# try to detect new keyboards - XXX THIS IS DANGEROUS if any key is pressed while xmodmap does its thing
	n_keyboards_new="`lsusb -v 2>/dev/null|grep Keyboard|wc -l`"
	need_xmodmap=
	if [ -z "$n_keyboards" ] || [ "$n_keyboards_new" -gt "$n_keyboards" ]; then
		# FIXME we also need to reset mousekeys but I don't know how to do it
		need_xmodmap=true
		n_keyboards="$n_keyboards_new"
	elif [ "$n_keyboards_new" -lt "$n_keyboards" ]; then
		echo "INFO: keyboard unplugged ($n_keyboards to $n_keyboards_new)" >&2
		echo "keyboard unplugged"|sh -c "$espeak"
		n_keyboards="$n_keyboards_new"
		[ -n "$mpv" -a -f "$lost_device" ] && "$mpv" --volume 100 "$lost_device" >/dev/null 2>&1
	fi

	if [ -n "`xmodmap -pk|grep ^lock|awk '{print $2}'`" ]; then
		need_xmodmap=true
	fi

	if [ -n "$need_xmodmap" ]; then
		echo "$WARNING running xmodmap" >&2
		[ -n "$mpv" -a -f "$msg" ] && "$mpv" --volume 100 "$msg" >/dev/null 2>&1
		fix-xmodmap
		[ -n "$mpv" -a -f "$complete" ] && "$mpv" --volume 100 "$complete" >/dev/null 2>&1
		echo "INFO: xmodmap done" >&2
		echo "keyboard set up"|sh -c "$espeak"
	fi

	# kill unwanted programs
	killall update-manager >/dev/null 2>&1

	# detect sysline refresh interval
	dt="`ps x|grep 'sysline.*+[0-9]'|sed -e 's/.*+\([0-9][0-9]*\).*/\1/'|sort -n|head -1`"
	test -n "$dt" || dt=60

	# detect NFS server crash
	grep -w nfs /etc/mtab|cut -d: -f1|sort|uniq | while read a; do
		nfsup "$a" >/dev/null || paplay --volume 16384 /software/sndkit/data/wav/alarm.wav
	done

	t="`date +%s`"
	tmp="`expr "$dt" - "$t" % "$dt"`"
	t_next="`expr "$t" + "$tmp"`"
	(
	case "$mode" in
	0)
		printf '['
		det="`ip -o addr	|grep -w inet \
					|grep ': e' \
					|awk '{print $2, $4}' \
					|cut -d/ -f1 \
					|sed -e 's/ /: /g'`"
		if [ -n "$det" ]; then
			printf '%s | ' "$det"
		fi
		det="`iwgetid -r`"
		if [ -n "$det" ]; then
			ip -o addr	|grep -w inet \
					|grep ': w' \
					|awk '{print $2, $4}' \
					|cut -d/ -f1 \
					|sed -e 's/ /: /g'
			printf '%s | ' "$det"
		fi
		batt	|tr -d \\n \
			|sed -e 's/ (.*)//g' -e 's/, Charging/↑/g' -e 's/, Discharging\(, input [0-9\.]\+ V\)\?/↓/g' -e 's/, Full/ ⏸/g' -e 's/, input / ⏦/g' -e 's/ temp / /g'
		printf '] '
		;;
	1)
		det="`foocal -M -p all --iconic -w`"
		test -n "$det" && printf '[%s]' "$det"
		;;
	2)
		printf "[%s]" "`temps -s`"
		;;
#	3)
#		df  -P -m|awk '{print $1 "\t" $5 "\t" $4}'|grep /dev\\\|:|sort -k2 -r -n|uniq
#		;;
	3)
		if [ -n "` /usr/local/sbin/mailq`" ]; then
			echo "$WARNING You have unsent mail" >&2
			[ -n "$mpv" -a -f "$msg" ] && "$mpv" --volume 100 "$msg" >/dev/null 2>&1
		fi
		if [ -n "$DISPLAY" ] && [ -z "`xlsclients|grep ' proton-bridge$'`" ]; then
			echo "$WARNING ProtonMail Bridge is not running" >&2
			[ -n "$mpv" -a -f "$msg" ] && "$mpv" --volume 100 "$msg" >/dev/null 2>&1
		elif [ -z "`ps axc|grep -w innd`" ]; then
			echo "$WARNING INND is not running" >&2
			[ -n "$mpv" -a -f "$msg" ] && "$mpv" --volume 100 "$msg" >/dev/null 2>&1
		elif [ -n "$DISPLAY" ] && [ -z "`xlsclients|grep ' evolution$'`" ]; then
			echo "$WARNING Evolution is not running" >&2
			[ -n "$mpv" -a -f "$msg" ] && "$mpv" --volume 100 "$msg" >/dev/null 2>&1
		fi
		;;
	4)
		printf 'PAY PHONE AND CREDIT CARD BILLS TODAY'
		;;
	esac
	) > $HOME/.who
	t="`date +%s`"
	dt="`expr "$t_next" - "$t"`"
	test -n "$dt" && test 1 -le "$dt" && sleep "$dt"
	mode="`expr \( "$mode" + 1 \) % $divisor`"
done
